/* @pjs font="data/HelveticaBold.ttf"; */

PFont f;                          

int numpoints=30; //number of points
int currmin = 0; //tracks index of nearest target
int secondmin = 0; //tracks index of second-nearest target
int currTarget = 0; //tracks index of target to click in test mode
int numHits = 0;
int numMisses = 0;
int runningTotalTime = 0;
int numClicks = 0;

//floats and float arrays to handle position, movement, timing
float x, y;              //old cursor position
float cursorX, cursorY;  //cursor position
float[] pointsX, pointsY;
float[] diameter;
float[] containDistances = new float[numpoints];
float[] intersectDistances = new float[numpoints];
float[] distances = new float[numpoints];
float cursorDiameter;
float startTime=0;
float timeElapsed=0;


int[] trails = new int[10]; // array that holds the random order of trials
int trialindex = 0; // identifier for the current trial


//booleans to track program mode and bubble behavior
boolean morphed; //tracks if the bubble needs to be morphed
boolean regularCursor; //turns off the bubble cursor entirely
boolean testMode; // activates the target-timing test
boolean infoOn=true; //displays useful information, deactivate with "i"
boolean collisionsFound; //used only in initializing points to prevent overlap

void keyPressed() {
}

void startTest(){
  startTime = millis();
  int oldTarget = currTarget;
  while (currTarget == oldTarget){
    currTarget = floor(random(0,numpoints));  
  }
}


void mousePressed(){
  numClicks++;

 if (testMode&& !regularCursor)
 {
   if (currmin==currTarget)
   {
     timeElapsed = millis()-startTime;
     runningTotalTime += timeElapsed;
     numHits++;
     startTest();
   }
   else
   {
      numMisses++;
   }
 }
 
 if (testMode&& regularCursor)
 {
   if (dist(mouseX,mouseY,pointsX[currTarget],pointsY[currTarget])<diameter[currTarget]/2)
   {
     timeElapsed = millis()-startTime;
     runningTotalTime += timeElapsed;
     numHits++;
     startTest();
   }
   else
   {
      numMisses++;
   }
 }
 
}

void initializePoints(){
  for (int i =0;i<numpoints;i++){     
        pointsX[i]= random(240,960);
        pointsY[i]= random(40,760);
        diameter[i]= random(10,60);
      }
  collisionsFound=false;
  for (int i=0;i<numpoints;i++){
     for (int j=0; j<i; j++)
     {
       float separation = dist(pointsX[i],pointsY[i],pointsX[j],pointsY[j]);
         if  ((separation < (diameter[i]/2)+20) || (separation<(diameter[j]/2)+20)){
           collisionsFound=true;
     }
  }

  }

}

void selectTrial() {
  // for all trials the information will not be displayed to the user
  infoOn = false;
  testMode = true;
  numClicks = 0;
  
  // select the next trial

}

// Trial one is cursor off
void initializeTrial1() {
  regularCursor = true;
}

// Trial two is cursor on
void initializeTrial2() {
  regularCursor = false;
}

// Trial three is cursor off large distance
void initializeTrial3() {
  regularCursor = true;
}

// Trial four is cursor off small distance
void initializeTrial4() {
  regularCursor = true;
}

// Trial five is cursor on large distance
void initializeTrial5() {
  regularCursor = false;
}

// Trial six is cursor on small distance
void initializeTrial6() {
  regularCursor = false;
}

// Trial seven is cursor off small diameter
void initializeTrial7() {
  regularCursor = true;
}

// Trial eight is cursor off large diameter
void initializeTrial8() {
  regularCursor = true;
}

// Trial nine is cursor on small diameter
void initializeTrial9() {
  regularCursor = false;
}

// Trial ten is cursor on large diameter
void initializeTrial10() {
  regularCursor = false;
}

void setup() 
{

  size(1000, 800); 
  smooth();
  noStroke();
  pointsX = new float[numpoints];
  pointsY = new float[numpoints];
  diameter = new float[numpoints];

  f = loadFont("HelveticaBold");
  textFont(f,13);
  
  //initialize some random points
  collisionsFound=true;
    while (collisionsFound){
      initializePoints();
    }  
      
      
}

void draw() 
{ 
  background( 51 );
  cursorX = mouseX;  
  
  //here we follow the strategy on processing.org's tutorial for tracking mouse movement
  float dx = cursorX - x; //change in xposition
  if(abs(dx) > 1) { 
    x += dx;               
  }
  
  cursorY = mouseY;
  float dy = cursorY - y; //change in yposition
  if(abs(dy) > 1) {
    y += dy;
  }
  
  
  morphed=false; //true iff we need a morphed cursor bubble
  currmin=0; 
  secondmin=0;

  //compute distances to center, outermost and innermost
  //sides of all neighbors
  for (int i=0; i<pointsX.length; i++)
  {
    distances[i] = dist(x,y,pointsX[i],pointsY[i]); //distance to centers
    containDistances[i] = distances[i] + diameter[i]; //distance to contain
    intersectDistances[i] = distances[i]-(diameter[i]/2); //distance to intersect
    
    //find the nearest neighbor
    if ((intersectDistances[i]< intersectDistances[currmin]))
    {

      currmin=i;
    }
  }
  
    cursorDiameter = 2*distances[currmin] + diameter[currmin];
    
  //find the second-nearest neighbor, if needed
  for (int i=0;i<pointsX.length;i++){
    
    //check if we intersect the ith point, and if so, if the ith point is smaller
    if (!regularCursor && (i!= currmin) && (cursorDiameter/2 > intersectDistances[i])){
      morphed=true;
      secondmin = i;
      cursorDiameter = 2*intersectDistances[i];
    }
  }

  fill(255,200,200);
  
  if (morphed && !regularCursor)
  {
    ellipse(pointsX[currmin], pointsY[currmin], diameter[currmin]+10, diameter[currmin]+10 );
    
 }
  if (!regularCursor){
    ellipse(x, y, cursorDiameter, cursorDiameter);
  }
  
  //draw targets
  fill(234,211,237);
  for (int i=0;i<pointsX.length;i++){  
    if (testMode && (i ==currTarget))
    {
      // target color
      fill(0,255,102);
      ellipse(pointsX[i],pointsY[i],diameter[i],diameter[i]);
      fill(234,211,237);
    }
    else{
      ellipse(pointsX[i],pointsY[i],diameter[i],diameter[i]);
    }

  }
}






